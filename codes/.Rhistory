cov.G4 <- bw_loci(G4_bigwigs,peaks_bed,labels=c("G4_NT"))
cov.combined <- bw_loci(combined_bigwigs,peaks_bed,labels=c("mock","PDS","PhenDC3"))
cov.geo <- bw_loci(geo_bigwigs,peaks_bed,labels=c("GEO_mock","GEO_PDS","GEO_PhenDC3"))
corr_df <- data.frame(data.frame(cov.combined)[,c(9,6,7,8)],data.frame(cov.geo)[,6:8],data.frame(cov.mocks)[,6:7],data.frame(cov.pds)[,6:7],data.frame(cov.pdc)[,6:7])
res <- cor(corr_df[,2:13])
corrplot(res, type = "upper", order = "hclust",tl.col = "black", tl.srt = 45,addCoef.col = 'black',tl.pos = 'd',    cl.pos = 'n', col.lim=c(0.93, 1),is.corr = F, method = 'color')
p1 <- plot_bw_profile(c(mocks_bigwigs[1],pds_bigwigs[1],pdc_bigwigs[1]),loci = "../peaks/G4 CTCF_with_promoters_sorted.bed",mode = "center",verbose = F) + coord_cartesian(ylim=c(0,2.4))
p2 <- plot_bw_profile(c(mocks_bigwigs[2],pds_bigwigs[2],pdc_bigwigs[2]),loci = "../peaks/G4 CTCF_with_promoters_sorted.bed",mode = "center",verbose = F) + coord_cartesian(ylim=c(0,2.4))
p3 <- plot_bw_profile(bwfiles = combined_bigwigs,loci = "../peaks/G4 CTCF_with_promoters_sorted.bed",mode = "center",verbose = F) + coord_cartesian(ylim=c(0,2.4))
ggarrange(p1,p2,p3, ncol=3)
p1 <- plot_bw_profile(bwfiles = geo_bigwigs,loci = "../peaks/G4 CTCF_with_promoters_sorted.bed",mode = "center",verbose = F) + coord_cartesian(ylim=c(0,5))
p2 <- plot_bw_profile(bwfiles = combined_bigwigs,loci = "../peaks/G4 CTCF_with_promoters_sorted.bed",mode = "center",verbose = F) + coord_cartesian(ylim=c(0,2.6))
ggarrange(p1,p2, ncol=2)
p1 <- plot_bw_profile(bwfiles = geo_bigwigs,loci = "../peaks/CTCF-only_with_promoters_sorted.bed",mode = "center",verbose = F) + coord_cartesian(ylim=c(0,5))
p2 <- plot_bw_profile(bwfiles = combined_bigwigs,loci = "../peaks/CTCF-only_with_promoters_sorted.bed",mode = "center",verbose = F) + coord_cartesian(ylim=c(0,2.6))
ggarrange(p1,p2, ncol=2)
p1 <- plot_bw_loci_scatter(mocks_bigwigs[1],mocks_bigwigs[2], loci = "../peaks/G4 CTCF_with_promoters_sorted.bed", verbose = F)
p2 <- plot_bw_loci_scatter(pds_bigwigs[1],pds_bigwigs[2], loci = "../peaks/G4 CTCF_with_promoters_sorted.bed", verbose = F)
p3 <- plot_bw_loci_scatter(pdc_bigwigs[1],pdc_bigwigs[2], loci = "../peaks/G4 CTCF_with_promoters_sorted.bed", verbose = F)
ggarrange(p1,p2,p3, ncol=3)
p1 <- plot_bw_loci_scatter(combined_bigwigs[1],combined_bigwigs[2], loci = "../peaks/G4 CTCF_with_promoters_sorted.bed", verbose = F)
p2 <- plot_bw_loci_scatter(combined_bigwigs[2],combined_bigwigs[3], loci = "../peaks/G4 CTCF_with_promoters_sorted.bed", verbose = F)
p3 <- plot_bw_loci_scatter(combined_bigwigs[1],combined_bigwigs[3], loci = "../peaks/G4 CTCF_with_promoters_sorted.bed", verbose = F)
ggarrange(p1,p2,p3, ncol=3)
results <- data.frame(
as.data.frame(cov.mocks),
as.data.frame(cov.pds)[6:7],
as.data.frame(cov.pdc)[6:7],
as.data.frame(cov.G4)[6],
raw.lfc.pds_1 = log2(cov.pds$PDS_1 / cov.mocks$mock_1),
raw.lfc.pds_2 = log2(cov.pds$PDS_2 / cov.mocks$mock_2),
raw.lfc.pdc_1 = log2(cov.pds$PDS_1 / cov.mocks$mock_1),
raw.lfc.pdc_2 = log2(cov.pdc$PhenDC3_2 / cov.mocks$mock_2),
raw.lfc.pds = log2(rowMeans(as.data.frame(cov.pds)[6:7]) / rowMeans(as.data.frame(cov.mocks)[6:7])),
raw.lfc.pdc = log2(rowMeans(as.data.frame(cov.pdc)[6:7]) / rowMeans(as.data.frame(cov.mocks)[6:7])),
mean.mock = rowMeans(as.data.frame(cov.mocks)[6:7]),
mean.pds = rowMeans(as.data.frame(cov.pds)[6:7]),
mean.pdc = rowMeans(as.data.frame(cov.pdc)[6:7])
)
cov.mocks$name <- NULL
cov.pds$name <- NULL
cov.pdc$name <- NULL
de_pds <- bw_granges_diff_analysis(cov.mocks, cov.pds, "Mock", "PDS")
lfc_pds = DESeq2::lfcShrink(de_pds, coef = "condition_PDS_vs_Mock", type = "apeglm")
de_pdc <- bw_granges_diff_analysis(cov.mocks, cov.pdc, "Mock", "PhenDC3")
lfc_pdc = DESeq2::lfcShrink(de_pdc, coef = "condition_PhenDC3_vs_Mock", type = "apeglm")
results$deseq.lfc.pds <- results(de_pds)$log2FoldChange
results$deseq.lfcs.pds <- lfc_pds$log2FoldChange
results$deseq.padj.pds <- lfc_pds$padj
results$deseq.mean.pds <- log2(lfc_pds$baseMean)
results$deseq.sig.pds <- lfc_pds$pvalue < 0.05
results$deseq.lfc.pdc <- results(de_pdc)$log2FoldChange
results$deseq.lfcs.pdc <- lfc_pdc$log2FoldChange
results$deseq.padj.pdc <- lfc_pdc$padj
results$deseq.mean.pdc <- log2(lfc_pdc$baseMean)
results$deseq.sig.pdc <- lfc_pdc$pvalue < 0.05
results$class <- gsub(" .+", "", results$name)
results$pro <- gsub(".+ ", "", results$name)
results$pro <- factor(results$pro, levels = c("Pro", "noPro"))
results$class <- factor(results$class, levels = c("CTCF_and_G4", "CTCF_not_G4"))
results$log2.mock <- log2(results$mean.mock)
results$log2.pds <- log2(results$mean.pds)
results$log2.pdc <- log2(results$mean.pdc)
results$log2.G4 <- log2(results$G4_NT)
results$deseq.sigup.pds <- results$deseq.sig.pds &
results$deseq.lfc.pds > 0
results$deseq.sigup.pdc <- results$deseq.sig.pdc &
results$deseq.lfc.pdc > 0
write.table(results, glue("{result_folder}foldchange_results.txt"))
table(results$name)
#results <- read.table("foldchange_results.txt")
results$class <- factor(results$class, levels = c("CTCF_and_G4", "CTCF_not_G4"))
p <- ggviolin(
results,
x = "class",
y = "mean.mock",
fill = "class",
palette = mypal,
add = "median_iqr"
) + coord_cartesian(ylim = c(0, 10))
annotate_figure(p, fig.lab = "CTCF signal by class in mock condition, mean of two reps, median+iqr", fig.lab.size = 6)
ggsave(glue("{plot_folder}Violin_CTCF_classes.pdf"), last_plot())
p <- ggviolin(
results,
x = "class",
y = "mean.mock",
fill = "pro",
palette = mypal,
add = "median_iqr"
) + coord_cartesian(ylim = c(0, 10))
annotate_figure(p, fig.lab = "CTCF signal by class in mock condition, mean of two reps, median+iqr", fig.lab.size = 6)
ggsave(glue("{plot_folder}Violin_CTCF_classes_pro.pdf"),
last_plot())
mdf <- reshape2::melt(dplyr::select(
results,
c(
"class",
"mock_1",
"mock_2",
"PDS_1",
"PDS_2",
"PhenDC3_1",
"PhenDC3_2"
)
))
ggboxplot(
mdf,
x = "variable",
y = "value",
fill = "class",
palette = mypal
) + coord_cartesian(ylim = c(0, 10))
ggsave(glue("{plot_folder}Boxplot_CTCF_reps.pdf"), last_plot())
mdf <- reshape2::melt(dplyr::select(
results,
c(
"class",
"mock_1",
"mock_2",
"PDS_1",
"PDS_2",
"PhenDC3_1",
"PhenDC3_2"
)
))
mdf_stats_class = compare_means(value ~ class, group.by = "variable", data = mdf)
ggviolin(
mdf,
x = "variable",
y = "value",
fill = "class",
palette = mypal,
add = "median_iqr"
) + coord_cartesian(ylim = c(0, 10))
ggsave(glue("{plot_folder}Violin_CTCF_reps.pdf"), last_plot())
mdf <- reshape2::melt(dplyr::select(results, c(
"class", "deseq.lfc.pds", "deseq.lfc.pdc"
)))
p <- ggviolin(
mdf,
x = "variable",
y = "value",
fill = "class",
palette = mypal,
add = "median_iqr"
) + geom_hline(yintercept = 0, linetype = "dotted") + coord_cartesian(ylim =
c(-3, 3)) + stat_compare_means(aes(group = class), label.y = 3, size = 2)
annotate_figure(p, fig.lab = "DESEq foldchange mean treat vs mean mock, median+iqr", fig.lab.size = 6)
ggsave(
glue("{plot_folder}Violin_CTCF_lfc.pdf"),
last_plot(),
width = 5,
height = 5
)
p <- ggboxplot(
mdf,
x = "variable",
y = "value",
fill = "class",
palette = mypal
) + geom_hline(yintercept = 0, linetype = "dotted") + coord_cartesian(ylim =
c(-2, 2))
annotate_figure(p, fig.lab = "DESEq foldchange mean treat vs mean mock, median+iqr", fig.lab.size = 6)
ggsave(glue("{plot_folder}Boxplot_CTCF_lfc.pdf"), last_plot())
mdf <- reshape2::melt(dplyr::select(results, c(
"pro", "class", "deseq.lfc.pds", "deseq.lfc.pdc"
)))
mdf$pro <- factor(mdf$pro, levels = c("Pro", "noPro"))
mdf$x <- as.factor(paste0(mdf$class, " ", mdf$variable))
mdf$x <- factor(mdf$x, levels = levels(mdf$x)[c(2, 1, 4, 3)])
p <- ggviolin(
mdf,
x = "x",
y = "value",
fill = "class",
palette = mypal,
add = "median_iqr",
facet.by = "pro"
) + geom_hline(yintercept = 0, linetype = "dotted") + coord_cartesian(ylim =
c(-2, 2)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
annotate_figure(p, fig.lab = "DESEq foldchange mean treat vs mean mock, median+iqr", fig.lab.size = 6)
ggsave(glue("{plot_folder}Violin_CTCF_lfc_pro.pdf"), last_plot())
med <- aggregate(deseq.lfc.pds ~ class,
data = results,
FUN = "median",
na.rm = T)
med$deseq.fc.pds <- 2 ^ med$deseq.lfc.pds
med
med <- aggregate(deseq.lfc.pds ~ name,
data = results,
FUN = "median",
na.rm = T)
med$deseq.fc.pds <- 2 ^ med$deseq.lfc.pds
med
med <- aggregate(deseq.lfc.pds ~ class,
data = results,
FUN = "median",
na.rm = T)
med$deseq.fc.pds <- 2 ^ med$deseq.lfc.pds
med
med <- aggregate(deseq.lfc.pdc ~ name,
data = results,
FUN = "median",
na.rm = T)
med$deseq.fc.pdc <- 2 ^ med$deseq.lfc.pdc
med
deseq_lfc_stats = compare_means(deseq.lfc.pds ~ class, data = results)
deseq_lfc_stats
write_tsv(deseq_lfc_stats,
glue("{stat_output}pds-deseq2_lfc_statistics.tsv"))
deseq_lfc_stats = compare_means(deseq.lfc.pdc ~ class, data = results)
deseq_lfc_stats
write_tsv(deseq_lfc_stats,
glue("{stat_output}phendc-deseq2_lfc_statistics.tsv"))
mdf <- reshape2::melt(dplyr::select(
results,
c(
"class",
"raw.lfc.pds_1",
"raw.lfc.pds_2",
"raw.lfc.pdc_1",
"raw.lfc.pdc_2"
)
))
ggviolin(
mdf,
x = "variable",
y = "value",
fill = "class",
palette = mypal,
add = "median_iqr"
) + geom_hline(yintercept = 0, linetype = "dotted") + coord_cartesian(ylim =
c(-3, 3)) +
stat_compare_means(aes(group = class), label.y = 3.6, size = 2)
ggsave(glue("{plot_folder}Violin_CTCF_lfc_individual_reps.pdf"), last_plot())
ggdensity(
results,
x = "raw.lfc.pds",
color = "class",
fill = "class",
palette = mypal
) + geom_vline(xintercept = 0, linetype = "dotted")
ggdensity(
results,
x = "raw.lfc.pdc",
color = "class",
fill = "class",
palette = mypal
) + geom_vline(xintercept = 0, linetype = "dotted")
ggscatter(
results,
x = "log2.mock",
y = "log2.pds",
size = 1,shape=20,
alpha = 0.1,
color = "deseq.sig.pds",
palette = mypal[c(5, 2)]
)
ggsave(glue("{plot_folder}Scatter_CTCF_DESEq_PDSvsMock.pdf"), rasterize(last_plot(),dpi = 600),width = 3, height= 3.2)
ggscatter(
results,
x = "log2.mock",
y = "log2.pdc",
size = 1,shape=20,
alpha = 0.1,
color = "deseq.sig.pdc",
palette = mypal[c(5, 2)]
)
ggsave(glue("{plot_folder}Scatter_CTCF_DESEq_PhenDC3vsMock.pdf"), rasterize(last_plot(),dpi = 600),width = 3, height= 3.2)
tb <- table(results$class)
deseq.stats <- as.data.frame(t(as.matrix(tb)))
deseq.stats[1,] <- colSums(deseq.stats)
rownames(deseq.stats) <- c("Total")
deseq.stats.percent <- deseq.stats
deseq.stats.percent[1,] <- c(100,100)
tb
tb <- table(results$deseq.sig.pds &
(results$deseq.lfc.pds > 0),
results$class)
deseq.stats <- rbind(deseq.stats, PDS.sig.up = as.data.frame.matrix(tb)[2,])
tb
tb <- prop.table(table(results$deseq.sig.pds &
(results$deseq.lfc.pds > 0),
results$class),margin = 2)*100
deseq.stats.percent <- rbind(deseq.stats.percent, PDS.sig.up  = as.data.frame.matrix(tb)[2,])
tb
table(results$deseq.sig.pds &
(results$deseq.lfc.pds > 0),
results$class)
mdf <- reshape2::melt(table(
results$deseq.sig.pds & (results$deseq.lfc.pds > 0),
results$class
))
ggplot(mdf, aes(Var1, Var2, fill = value)) +
geom_tile(show.legend = F) + geom_text(aes(label = value)) +
scale_fill_gradient(low = "white", high = "orange") + theme_minimal()
vl <- list(
sig = grep("TRUE", results$deseq.sigup.pds),
CTCF_G4 = grep("and", results$class),
CTCFonly = grep("not", results$class)
)
plot(euler(vl), quantities = T)
tb <- table(results$deseq.sig.pdc &
(results$deseq.lfc.pdc > 0),
results$class)
deseq.stats <- rbind(deseq.stats, PhenDC3.sig.up = as.data.frame.matrix(tb)[2,])
tb
tb <- prop.table(table(results$deseq.sig.pdc &
(results$deseq.lfc.pdc > 0),
results$class),margin = 2)*100
deseq.stats.percent <- rbind(deseq.stats.percent, PhenDC3.sig.up = as.data.frame.matrix(tb)[2,])
tb
table(results$deseq.sig.pdc &
(results$deseq.lfc.pdc > 0),
results$class)
mdf <- reshape2::melt(table(
results$deseq.sig.pdc & (results$deseq.lfc.pdc > 0),
results$class
))
ggplot(mdf, aes(Var1, Var2, fill = value)) +
geom_tile(show.legend = F) + geom_text(aes(label = value)) +
scale_fill_gradient(low = "white", high = "orange") + theme_minimal()
results$uid <- seq(1:nrow(results))
vl <- list(
sig = grep("TRUE", results$deseq.sigup.pdc),
CTCF_G4 = grep("and", results$class),
CTCFonly = grep("not", results$class)
)
plot(euler(vl), quantities = T)
table(results$deseq.sigup.pds, results$deseq.sigup.pdc)
mdf <- reshape2::melt(table(results$deseq.sigup.pds, results$deseq.sigup.pdc))
ggplot(mdf, aes(Var1, Var2, fill = value)) +
geom_tile(show.legend = F) + geom_text(aes(label = value)) +
scale_fill_gradient(low = "white", high = "orange") + theme_minimal()
tb <- table(results$deseq.sigup.pds & results$deseq.sigup.pdc,
results$class)
deseq.stats <- rbind(deseq.stats, both.sig.up = as.data.frame.matrix(tb)[2,])
tb
tb <- prop.table(table(results$deseq.sigup.pds & results$deseq.sigup.pdc,
results$class),margin = 2)*100
deseq.stats.percent <- rbind(deseq.stats.percent, both = as.data.frame.matrix(tb)[2,])
tb
table(results$deseq.sigup.pds & results$deseq.sigup.pdc, results$class)
mdf <- reshape2::melt(table(results$deseq.sigup.pds & results$deseq.sigup.pdc, results$class))
ggplot(mdf, aes(Var1, Var2, fill = value)) +
geom_tile(show.legend = F) + geom_text(aes(label = value)) +
scale_fill_gradient(low = "white", high = "orange") + theme_minimal()
deseq.stats$class <- rownames(deseq.stats)
mdf <- reshape2::melt(deseq.stats)
ggplot(mdf, aes(variable, class, fill = value)) +
geom_tile(show.legend = F) + geom_text(aes(label = value)) +
scale_fill_gradient(low = "white", high = "orange") + theme_minimal()
ggsave(glue("{plot_folder}Table_CTCF_DESEq_Sigup.pdf"), rasterize(last_plot(),dpi = 600),width = 2.5, height= 2.5)
deseq.stats.percent$class <- rownames(deseq.stats.percent)
mdf <- reshape2::melt(deseq.stats.percent[-1,])
ggplot(mdf, aes(variable, class, fill = value)) +
geom_tile(show.legend = F) + geom_text(aes(label = round(mdf$value,2))) +
scale_fill_gradient(low = "white", high = "orange") + theme_minimal()
ggsave(glue("{plot_folder}Table_CTCF_DESEq_Sigup_percent.pdf"), rasterize(last_plot(),dpi = 600),width = 2.5, height= 2.5)
vl <- list(
sig_PDS = grep("TRUE", results$deseq.sigup.pds),
sig_PDC = grep("TRUE", results$deseq.sigup.pdc),
CTCF_G4 = grep("and", results$class),
CTCFonly = grep("not", results$class)
)
plot(euler(vl), quantities = T)
results$uid <- seq(1:nrow(results))
vl <- list(
sig_PDS = grep("TRUE", results$deseq.sigup.pds),
sig_PDC = grep("TRUE", results$deseq.sigup.pdc),
CTCF_G4 = grep("and", results$class)
)
plot(euler(vl), quantities = T)
results$sig.by.class.pds <- paste0(results$deseq.sigup.pds, "_", results$class)
results$psize <- 0.01
results$psize[results$deseq.sigup.pds &
results$class == "CTCF_and_G4"] <- 1
ggscatter(
results,
x = "log2.mock",
y = "log2.pds",
size = 0.5,
alpha = results$psize,
color = "sig.by.class.pds",
palette = c(mypal[5], mypal[5], mypal[5], mypal[2], mypal[1])
)
ggscatter(
results[!grepl("NA", results$sig.by.class.pds), ],
x = "log2.mock",
y = "deseq.lfc.pds",
size = 0.2,
alpha = "psize",
color = "sig.by.class.pds",
palette = c("#505050", "#505050", "red2", "blue")
)
ggscatterhist(
results[!grepl("NA", results$sig.by.class.pds), ],
x = "log2.mock",
y = "log2.pds",
size = 0.4,
alpha = "psize",
color = "sig.by.class.pds",
margin.params = list(
fill = "sig.by.class.pds",
color = "black",
size = 0.2
),
palette = c("#505050", "#505050", "red2", "blue")
)
ggscatter(
results,
x = "raw.lfc.pds",
y = "log2.G4",
size = 0.2,
alpha = 0.1,
color = "deseq.sig.pds",
cor.coef = T,
palette = c("#888888",mypal[2])
)
ggsave(glue("{plot_folder}Scatter_G4_vs_LFC_PDS.pdf"),
plot = rasterize(last_plot()))
ggscatter(
results,
x = "raw.lfc.pdc",
y = "log2.G4",
size = 0.2,
alpha = 0.1,
color = "deseq.sig.pdc",
cor.coef = T,
palette = c("#888888",mypal[2])
)
ggsave(glue("{plot_folder}Scatter_G4_vs_LFC_PDC.pdf"),
plot = rasterize(last_plot()))
results$G4.quantile <- dplyr::ntile(results$G4_NT, n = 5)
results$pds.quantile <- dplyr::ntile(results$mean.pds-results$mean.mock, n = 4)
results$pdc.quantile <- dplyr::ntile(results$mean.pdc-results$mean.mock, n = 4)
tb <- table(results$pds.quantile, results$class)
tb
ggbarplot(as.data.frame(t(as.matrix(tb))),"Var2","Freq",fill="Var1",palette = c(mypal[1],"#aaaaaa"),label = TRUE, lab.pos="in",ylim=c(11000,13000))
ggsave(glue("{plot_folder}Barplot_peakCat_by_PDSquantile.pdf"),
plot = last_plot())
ggviolin(
results,
x = "pds.quantile",
y = "deseq.lfc.pds",
fill = mypal[3],
add = "median_iqr"
) + coord_cartesian(ylim = c(-1.5, 1.5)) + geom_hline(yintercept = 0, linetype =
"dotted")
ggsave(glue("{plot_folder}Violin_lfcPDS_by_PDSquantile.pdf"),
plot = last_plot())
ggviolin(
results,
x = "pds.quantile",
y = "log2.G4",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(-5, 5)) + geom_hline(yintercept = 0, linetype =
"dotted")
ggsave(glue("{plot_folder}Violin_G4_by_PDSquantile.pdf"),
plot = last_plot())
compare_means(G4_NT ~ (pds.quantile == 4), results)
compare_means(G4_NT ~ pds.quantile, results)
results$pds.quartile.top25 <- results$pds.quantile == 4
results$pds.quartile.top25 <- results$pds.quantile == 4
compare_means(G4_NT ~ pds.quartile.top25, results)
compare_means(G4_NT ~ pds.quartile.top25, results,method="t.test")
compare_means(G4_NT ~ pds.quartile.top25, results)
aggregate(results$G4_NT,by=pds.quartile.top25)
mean(G4_NT)
mean(results$G4_NT)
results$pds.quartile.top25 <- results$pds.quantile == 4
mean(results$G4_CnR_lfc)
mean(results$G4_CnR_lfc[pds.quartile.top25])
results$pds.quartile.top25 <- results$pds.quantile == 4
mean(results$G4_CnR_lfc)
mean(results$G4_CnR_lfc[pds.quartile.top25==TRUE])
results$pds.quartile.top25 <- results$pds.quantile == 4
mean(results$G4_CnR_lfc)
mean(results$G4_CnR_lfc[results$pds.quartile.top25])
mean(results$G4_CnR_lfc[!results$pds.quartile.top25])
compare_means(G4_CnR_lfc ~ pds.quartile.top25, results)
G4_CnR <- bw_loci(c("../mendeley/FigureS2/GSM6634325_E14_Mock_G4.bw","../mendeley/FigureS2/GSM6634326_E14_PDS_G4.bw"),loci = makeGRangesFromDataFrame(results,na.rm=T),labels = c("Mock","PDS"))
results$G4_CnR_delta <- G4_CnR$PDS-G4_CnR$Mock
results$G4_CnR_lfc <- log2(G4_CnR$PDS/G4_CnR$Mock)
results$G4_CnR_mock <- G4_CnR$Mock
compare_means(G4_CnR_lfc ~ pds.quantile, results)
results$pds.quartile.top25 <- results$pds.quantile == 4
colMeans(results$G4_CnR_lfc)
results$pds.quartile.top25 <- results$pds.quantile == 4
colMeans(results$G4_CnR_lfc)
mean(results$G4_CnR_lfc)
results$G4_CnR_lfc
mean(na.omit(results$G4_CnR_lfc))
mean(results$G4_CnR_lfc[na.omit(results$G4_CnR_lfc)])
na.omit(results$G4_CnR_lfc)
mean(results$G4_CnR_lfc[na.omit(results$G4_CnR_lfc)])
results$G4_CnR_lfc[na.omit(results$G4_CnR_lfc)]
na.omit(results$G4_CnR_lfc)
mean(na.omit(results$G4_CnR_lfc))
results$pds.quartile.top25 <- results$pds.quantile == 4
compare_means(G4_CnR_lfc ~ pds.quartile.top25, results)
colMeans(results$G4_CnR_lfc[results$pds.quartile.top25])
mean(results$G4_CnR_lfc[results$pds.quartile.top25])
mean(results$G4_CnR_lfc[!results$pds.quartile.top25])
results$G4_CnR_lfc[results$pds.quartile.top25]
compare_means(G4_CnR_delta ~ pds.quantile, results)
results$pds.quartile.top25 <- results$pds.quantile == 4
mean(na.omit(results$G4_CnR_delta))
mean(results$G4_CnR_delta[results$pds.quartile.top25])
mean(results$G4_CnR_delta[!results$pds.quartile.top25])
compare_means(G4_CnR_delta ~ pds.quartile.top25, results)
