ctcf$nearest_G4[!is.na(nearest_G4_50kb$nearby_features)] <- "<50kb"
ctcf$nearest_G4[!is.na(nearest_G4_10kb$nearby_features)] <- "<10kb"
ctcf$nearest_G4[!is.na(nearest_G4_5kb$nearby_features)] <- "<5kb"
ctcf$nearest_G4[!is.na(nearest_G4_2.5kb$nearby_features)] <- "<2.5kb"
ctcf$nearest_G4[!is.na(nearest_G4_1kb$nearby_features)] <- "<1kb"
ctcf$nearest_G4_type <- "none"
ctcf$nearest_G4_type[!is.na(nearest_G4_50kb$nearby_features)] <- nearest_G4_50kb$nearby_features[!is.na(nearest_G4_50kb$nearby_features)]
ctcf$nearest_G4_type[!is.na(nearest_G4_10kb$nearby_features)] <- nearest_G4_10kb$nearby_features[!is.na(nearest_G4_10kb$nearby_features)]
ctcf$nearest_G4_type[!is.na(nearest_G4_5kb$nearby_features)] <- nearest_G4_5kb$nearby_features[!is.na(nearest_G4_5kb$nearby_features)]
ctcf$nearest_G4_type[!is.na(nearest_G4_2.5kb$nearby_features)] <- nearest_G4_2.5kb$nearby_features[!is.na(nearest_G4_2.5kb$nearby_features)]
ctcf$nearest_G4_type[!is.na(nearest_G4_1kb$nearby_features)] <- nearest_G4_1kb$nearby_features[!is.na(nearest_G4_1kb$nearby_features)]
ctcf$nearest_G4_type[grep("pro", ctcf$nearest_G4_type)] <- "G4pro"
results$nearest_G4 <- ctcf$nearest_G4
results$nearest_G4_type <- ctcf$nearest_G4_type
table(results$nearest_G4)
table(results$nearest_G4_type)
table(results$nearest_G4, results$nearest_G4_type)
ggviolin(
results,
x = "nearest_G4",
y = "mean.mock",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(0, 10)) +
stat_compare_means(label.y = 8,
label.x = 3,
size = 3) +
geom_hline(yintercept = 0, linetype = "dotted")
ggsave(glue("{plot_folder}Violin_CTCF_signal_by_G4distance.pdf"),
plot = last_plot())
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pds",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(-4, 4)) + geom_hline(yintercept = 0, linewidth = 0.2) +
geom_hline(
yintercept = median(results$deseq.lfc.pds[results$nearest_G4 == "<1kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(label.y = 3,
label.x = 2,
size = 3)
ggsave(glue("{plot_folder}Violin_CTCF_PDS_lfc_by_G4distance.pdf"),
plot = last_plot())
nearest_G4_stats = compare_means(deseq.lfc.pds ~ nearest_G4, results)
nearest_G4_stats
write_tsv(nearest_G4_stats,
glue("{stat_output}pds_G4distance_plots-statistics.tsv"))
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pdc",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(-2, 2)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pdc[results$nearest_G4 == "<1kb"]),
linetype = "dotted",
linewidth = 0.2
)
ggsave(glue("{plot_folder}Violin_CTCF_PhenDC3_lfc_by_G4distance.pdf"), plot = last_plot())
nearest_G4_stats = compare_means(deseq.lfc.pdc ~ nearest_G4, results)
nearest_G4_stats
write_tsv(nearest_G4_stats, glue("{stat_output}phendc_G4distance_plots-statistics.tsv"))
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pds",
fill = "nearest_G4_type",
palette = mypal[c(1, 3, 5)],
add = "median_iqr"
) + coord_cartesian(ylim = c(-2, 4)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pds[results$nearest_G4 == "<1kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(aes(group = nearest_G4_type))
ggsave(glue("{plot_folder}Violin_CTCF_PDS_lfc_by_G4distance_pro.pdf"),
plot = last_plot())
compare_means(deseq.lfc.pds ~ nearest_G4, results[results$nearest_G4_type ==
"G4", ])
compare_means(deseq.lfc.pds ~ nearest_G4, results[results$nearest_G4_type ==
"G4", ]) %>%
write_tsv(.,
glue(
"{stat_output}pds_G4distance_plots-nearest_G4-statistics.tsv"
))
compare_means(deseq.lfc.pds ~ nearest_G4, results[results$nearest_G4_type ==
"G4pro", ])
compare_means(deseq.lfc.pds ~ nearest_G4, results[results$nearest_G4_type ==
"G4pro", ]) %>%
write_tsv(.,
glue(
"{stat_output}pds_G4distance_plots-nearest_G4pro-statistics.tsv"
))
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pdc",
fill = "nearest_G4_type",
palette = mypal[c(1, 3, 5)],
add = "median_iqr"
) + coord_cartesian(ylim = c(-2, 2)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pdc[results$nearest_G4 == "<1kb"]),
linetype = "dotted",
linewidth = 0.2
)
ggsave(glue(
"{plot_folder}Violin_CTCF_PhenDC3_lfc_by_G4distance_pro.pdf"
),
plot = last_plot())
compare_means(deseq.lfc.pdc ~ nearest_G4, results[results$nearest_G4_type ==
"G4", ])
compare_means(deseq.lfc.pdc ~ nearest_G4, results[results$nearest_G4_type ==
"G4", ]) %>%
write_tsv(.,
glue(
"{stat_output}phendc_G4distance_plots-nearest_G4-statistics.tsv"
))
compare_means(deseq.lfc.pdc ~ nearest_G4, results[results$nearest_G4_type ==
"G4pro", ])
compare_means(deseq.lfc.pdc ~ nearest_G4, results[results$nearest_G4_type ==
"G4pro", ]) %>%
write_tsv(.,
glue(
"{stat_output}phendc_G4distance_plots-nearest_G4pro-statistics.tsv"
))
#results <- read.table(glue("{result_folder}foldchange_results.txt"))
results$class <- factor(results$class, levels = c("CTCF_and_G4", "CTCF_not_G4"))
G4_bed <- import('../data/peaks/G4_WT_peaks.narrowPeak')
G4_bed$name <- "peak"
G4pred_bed <- import('../data/peaks/mm10_canonical_G4_PQS-regex.bed')
ATAC_bed <- import('../data/peaks/ATAC_seq_mESC_Martire_peaks.narrowPeak')
pro_bed <- import('../data/peaks/regions/promoters_geneSymbol.mm10.bed')
G4pred_bed <- bedscout::annotate_overlapping_features(G4pred_bed, G4_bed, name_field = "name")
G4pred_bed$name <- "G4pred"
G4pred_bed$name[grepl("peak", G4pred_bed$nearby_features)] <- "G4exp"
table(G4pred_bed$name)
nearest_G4_0kb <- bedscout::annotate_nearby_features(
ctcf,
G4pred_bed,
distance_cutoff = 0,
ignore.strand = T,
name_field = "name"
)
nearest_G4_1kb <- bedscout::annotate_nearby_features(
ctcf,
G4pred_bed,
distance_cutoff = 1000,
ignore.strand = T,
name_field = "name"
)
nearest_G4_2.5kb <- bedscout::annotate_nearby_features(
ctcf,
G4pred_bed,
distance_cutoff = 2500,
ignore.strand = T,
name_field = "name"
)
nearest_G4_5kb <- bedscout::annotate_nearby_features(
ctcf,
G4pred_bed,
distance_cutoff = 5000,
ignore.strand = T,
name_field = "name"
)
nearest_G4_10kb <- bedscout::annotate_nearby_features(
ctcf,
G4pred_bed,
distance_cutoff = 10000,
ignore.strand = T,
name_field = "name"
)
ctcf$nearest_G4 <- factor(">10kb",
levels = c("0kb", "<1kb", "<2.5kb", "<5kb", "<10kb", ">10kb"))
ctcf$nearest_G4[!is.na(nearest_G4_10kb$nearby_features)] <- "<10kb"
ctcf$nearest_G4[!is.na(nearest_G4_5kb$nearby_features)] <- "<5kb"
ctcf$nearest_G4[!is.na(nearest_G4_2.5kb$nearby_features)] <- "<2.5kb"
ctcf$nearest_G4[!is.na(nearest_G4_1kb$nearby_features)] <- "<1kb"
ctcf$nearest_G4[!is.na(nearest_G4_0kb$nearby_features)] <- "0kb"
results$nearest_G4 <- ctcf$nearest_G4
table(results$nearest_G4)
table(results$nearest_G4, results$pro)
mdf <- reshape2::melt(table(results$nearest_G4, results$pro))
ggplot(mdf, aes(Var1, Var2, fill = value)) +
geom_tile(show.legend = F) + geom_text(aes(label = value)) +
scale_fill_gradient(low = "white", high = "orange") + theme_minimal()
ggsave(glue("{plot_folder}Heatmap_CTCF_sites_by_predG4distance.pdf"),
plot = last_plot())
ggviolin(
results,
x = "nearest_G4",
y = "mean.mock",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(0, 10)) + geom_hline(yintercept = 0, linetype =
"dotted") +
stat_compare_means(
aes(group = nearest_G4),
label.y = 8,
label.x = 2,
size = 3
)
ggsave(glue(
"{plot_folder}Violin_CTCF_signal_by_predG4distance.pdf"),
plot = last_plot())
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pds",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(-0.5, 1.5)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = median(results$deseq.lfc.pds[results$nearest_G4 == "0kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(label.y = 1.3,
label.x = 3,
size = 2)
ggsave(glue("{plot_folder}Violin_CTCF_PDS_lfc_by_predG4distance.pdf"),
plot = last_plot())
compare_means(deseq.lfc.pds ~ nearest_G4, results)
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pdc",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(-0.5, 1.5)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pdc[results$nearest_G4 == "0kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(label.y = 1.3,
label.x = 3,
size = 2)
ggsave(glue(
"{plot_folder}Violin_CTCF_PhenDC3_lfc_by_predG4distance.pdf"
),
plot = last_plot())
compare_means(deseq.lfc.pdc ~ nearest_G4, results)
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pds",
fill = "pro",
palette = mypal[c(1, 3, 5)],
add = "median_iqr"
) + coord_cartesian(ylim = c(-0.5, 1.5)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pds[results$nearest_G4 == "0kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(aes(group = pro),
label.y = 1.3,
label.x = 3,
size = 1.5)
ggsave(glue("{plot_folder}Violin_CTCF_PDS_lfc_by_predG4distance_pro.pdf"), plot = last_plot())
compare_means(deseq.lfc.pds ~ nearest_G4, results[results$pro == "Pro", ]) %>%
write_tsv(.,
glue("{stat_output}pds_G4distance_plots-Pro-statistics.tsv"))
compare_means(deseq.lfc.pds ~ pro, group.by = "nearest_G4", results) %>%
write_tsv(.,
glue(
"{stat_output}pds_G4distance_plots-between_prom_types_stats.tsv"
))
compare_means(deseq.lfc.pds ~ nearest_G4, group.by = "pro", results) %>%
write_tsv(.,
glue(
"{stat_output}pds_G4distance_plots-within_prom_types_stats.tsv"
))
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pdc",
fill = "pro",
palette = mypal[c(1, 3, 5)],
add = "median_iqr"
) + coord_cartesian(ylim = c(-0.5, 1.5)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pdc[results$nearest_G4 == "0kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(aes(group = pro),
label.y = 1.3,
label.x = 3,
size = 1.5)
ggsave(glue(
"{plot_folder}Violin_CTCF_PhenDC3_lfc_by_predG4distance_pro.pdf"
),
plot = last_plot())
compare_means(deseq.lfc.pdc ~ nearest_G4, results[results$pro == "noPro", ]) %>%
write_tsv(.,
glue(
"{stat_output}phendc_G4distance_plots-noPro-statistics.tsv"
))
compare_means(deseq.lfc.pdc ~ pro, group.by = "nearest_G4", results) %>%
write_tsv(.,
glue(
"{stat_output}phendc_G4distance_plots-between_prom_types_stats.tsv"
))
compare_means(deseq.lfc.pdc ~ nearest_G4, group.by = "pro", results) %>%
write_tsv(.,
glue(
"{stat_output}phendc_G4distance_plots-within_prom_types_stats.tsv"
))
library(bedscout)
bedscout::plot_euler(list(rx.G4,tr.G4),names=c("Regex","G4Hunter"))
rx.G4 <- rtracklayer::import("../data/peaks/mm10_canonical_G4_PQS-regex.bed")
rx.G4 <- rtracklayer::import("../data/peaks/mm10_canonical_G4_PQS-regex.bed")
tr.G4 <- rtracklayer::import("../data/peaks/G4H_mm10_1.75.bed")
bedscout::plot_euler(list(rx.G4,tr.G4),names=c("Regex","G4Hunter"))
ggsave(glue("{plot_folder}Venn_Regex_G4Hunter.pdf"),
plot = last_plot())
library(bedscout)
library(ggplot2)
rx.G4 <- rtracklayer::import("../data/peaks/mm10_canonical_G4_PQS-regex.bed")
tr.G4 <- rtracklayer::import("../data/peaks/G4H_mm10_1.75.bed")
bedscout::plot_euler(list(rx.G4,tr.G4),names=c("Regex","G4Hunter"))
ggsave(glue("{plot_folder}Venn_Regex_G4Hunter.pdf"),
plot = last_plot())
G4_bed <- import('../data/peaks/G4_WT_peaks.narrowPeak')
G4_bed <- import('../data/peaks/G4_WT_peaks.narrowPeak')
G4_bed <- rtracklayer::import('../data/peaks/G4_WT_peaks.narrowPeak')
bedscout::plot_euler(list(rx.G4,tr.G4),names=c("Regex","G4Hunter"))
ggsave(glue("{plot_folder}Venn_Regex_G4Hunter.pdf"),
plot = last_plot())
library("tidyverse")
library("data.table")
library("rtracklayer")
library("ggrastr")
library("glue")
library("DESeq2")
library("ggpubr")
library("wigglescout")
library("eulerr")
library("ggplot2")
library("corrplot")
library("bedscout")
# export
result_folder = "../results/"
plot_folder = "../results/plots/"
stat_output = "../results/stats/"
combined_bigwigs <- list.files("../data/mendeley/Figure2", pattern = "*_CTCF*.bw",
full.names = TRUE)
geo_bigwigs <- list.files("../data/mendeley/Figure2",pattern ="*_CTCF.bw",
full.names = TRUE)
geo_CnR_bigwigs <- list.files("../data/mendeley/FigureS2", pattern = "*Wulfridge.bw",
full.names = TRUE)
# colors
mypal <-c("cornflowerblue","orange","red2","darkgreen","#505050")
mypal <-c("#00619D","#A82A34","orange","seagreen","#505050")
mypal2 <-c("#00619D","#7FB0CE","#A82A34","#D39499","orange","#FFD55A","seagreen","#7DBA9C","#505050")
G4_bed <- import('../data/peaks/G4_WT_peaks.narrowPeak')
ATAC_bed <- import('../data/peaks/ATAC_seq_mESC_Martire_peaks.narrowPeak')
pro_bed <- import('../data/peaks/regions/promoters_geneSymbol.mm10.bed')
G4_bed <- bedscout::annotate_overlapping_features(G4_bed, pro_bed, name_field = "name")
G4_bed$name <- "G4"
G4_bed$name[!is.na(G4_bed$nearby_features)] <- "G4pro"
G4_bed$name[grepl("pro", G4_bed$name)] <- "G4pro"
library(bedscout)
library(ggplot2)
rx.G4 <- rtracklayer::import("../data/peaks/mm10_canonical_G4_PQS-regex.bed")
tr.G4 <- rtracklayer::import("../data/peaks/G4H_mm10_1.75.bed")
G4_bed <- rtracklayer::import('../data/peaks/G4_WT_peaks.narrowPeak')
bedscout::plot_euler(list(rx.G4,tr.G4),names=c("Regex","G4Hunter"))
ggsave(glue("{plot_folder}Venn_Regex_G4Hunter.pdf"),
plot = last_plot())
bedscout::plot_euler(list(rx.G4,tr.G4,G4_bed),names=c("Regex","G4Hunter","G4 CUT&Tag peaks"))
bedscout::plot_euler(list(rx.G4,G4_bed),names=c("Regex","G4 CUT&Tag peaks"))
bedscout::plot_euler(list(rx.G4,G4_bed),names=c("Regex","G4"))
bedscout::plot_euler(list(rx.G4,tr.G4,G4_bed),names=c("Regex","G4Hunter","G4"))
ggsave(glue("{plot_folder}Venn_Regex_G4Hunter_G4CnT.pdf"),
plot = last_plot())
tr.G4$name <- "G4"
top25.pds.G4anno <- bedscout::annotate_nearby_features(top25.pds,tr.G4,name_field = "name", distance_cutoff = 1000)
library("tidyverse")
library("data.table")
library("rtracklayer")
library("ggrastr")
library("glue")
library("DESeq2")
library("ggpubr")
library("wigglescout")
library("eulerr")
library("ggplot2")
library("corrplot")
library("bedscout")
# export
result_folder = "../results/"
plot_folder = "../results/plots/"
stat_output = "../results/stats/"
combined_bigwigs <- list.files("../data/mendeley/Figure2", pattern = "*_CTCF*.bw",
full.names = TRUE)
geo_bigwigs <- list.files("../data/mendeley/Figure2",pattern ="*_CTCF.bw",
full.names = TRUE)
geo_CnR_bigwigs <- list.files("../data/mendeley/FigureS2", pattern = "*Wulfridge.bw",
full.names = TRUE)
# colors
mypal <-c("cornflowerblue","orange","red2","darkgreen","#505050")
mypal <-c("#00619D","#A82A34","orange","seagreen","#505050")
mypal2 <-c("#00619D","#7FB0CE","#A82A34","#D39499","orange","#FFD55A","seagreen","#7DBA9C","#505050")
# diff signal function
bw_granges_diff_analysis <- function(granges_c1,
granges_c2,
label_c1,
label_c2,
estimate_size_factors = FALSE,
as_granges = FALSE) {
# Bind first, get numbers after
names_values <- NULL
fields <- names(mcols(granges_c1))
if ("name" %in% fields) {
names_values <- mcols(granges_c1)[["name"]]
granges_c1 <- granges_c1[, fields[fields != "name"]]
}
fields <- names(mcols(granges_c2))
if ("name" %in% fields) {
granges_c2 <- granges_c2[, fields[fields != "name"]]
}
cts_df <- cbind(data.frame(granges_c1), mcols(granges_c2))
if (!is.null(names_values)) {
rownames(cts_df) <- names_values
}
# Needs to drop non-complete cases and match rows
complete <- complete.cases(cts_df)
cts_df <- cts_df[complete, ]
values_df <- cts_df[, 6:ncol(cts_df)] %>% dplyr::select(where(is.numeric))
cts <- get_nreads_columns(values_df)
condition_labels <- c(rep(label_c1, length(mcols(granges_c1))), rep(label_c2, length(mcols(granges_c2))))
coldata <- data.frame(colnames(cts), condition = as.factor(condition_labels))
print(coldata)
dds <- DESeq2::DESeqDataSetFromMatrix(
countData = cts,
colData = coldata,
design = ~ condition,
rowRanges = granges_c1[complete, ]
)
if (estimate_size_factors == TRUE) {
dds <- DESeq2::estimateSizeFactors(dds)
}
else {
# Since files are scaled, we do not want to estimate size factors
sizeFactors(dds) <- c(rep(1, ncol(cts)))
}
dds <- DESeq2::estimateDispersions(dds)
dds <- DESeq2::nbinomWaldTest(dds)
if (as_granges) {
result <- DESeq2::results(dds, format = "GRanges", alpha = 0.01)
if (!is.null(names_values)) {
result$name <- names_values[complete]
}
}
else {
# result <- results(dds, format="DataFrame")
result <- dds
}
result
}
get_nreads_columns <- function(df, length_factor = 100) {
# Convert mean coverages to round integer read numbers
cts <- as.matrix(df)
cts <- as.matrix(cts[complete.cases(cts), ])
cts <- round(cts * length_factor)
cts
}
ctcf.and.G4.pro <- import("../data/peaks/G4_CTCF_with_promoters_sorted.bed")
ctcf.not.G4.pro <- import("../data/peaks/CTCF-only_with_promoters_sorted.bed")
ctcf.and.G4.npr <- import("../data/peaks/G4_CTCF_without_promoters_sorted.bed")
ctcf.not.G4.npr <- import("../data/peaks/CTCF-only_without_promoters_sorted.bed")
ctcf.and.G4.pro$class <- "CTCF_and_G4"
ctcf.not.G4.pro$class <- "CTCF_not_G4"
ctcf.and.G4.npr$class <- "CTCF_and_G4"
ctcf.not.G4.npr$class <- "CTCF_not_G4"
ctcf.and.G4.pro$pro <- "Pro"
ctcf.not.G4.pro$pro <- "Pro"
ctcf.and.G4.npr$pro <- "noPro"
ctcf.not.G4.npr$pro <- "noPro"
ctcf.and.G4 <- c(ctcf.and.G4.pro,ctcf.and.G4.npr)
ctcf.not.G4 <- c(ctcf.not.G4.pro,ctcf.not.G4.npr)
ctcf <- c(ctcf.and.G4,ctcf.not.G4)
ctcf <- sortSeqlevels(ctcf)
ctcf <- sort(ctcf)
names(ctcf) <- paste0(ctcf$class," ",ctcf$pro)
peaks_bed <- "../data/peaks/CTCF_G4_in_6_categories.bed"
export.bed(ctcf, peaks_bed)
ctcf.raw <- import("../data/peaks/CTCF_mES_peaks.narrowPeak")
G4.raw <- import("../data/peaks/G4_WT_peaks.narrowPeak")
ctcf.raw$class <- "CTCF"
G4.raw$class <- "G4"
ctcf.raw$pro <- "NA"
G4.raw$pro <- "NA"
df <- rbind(as.data.frame(ctcf.raw)[c(1,2,3,4,5,12,13)], as.data.frame(G4.raw)[c(1,2,3,4,5,12,13)],as.data.frame(ctcf,row.names = NULL))
ggdensity(df,x="width",y = "density",color = "class", fill="class", alpha=0.1, palette=mypal) + scale_x_continuous(limits = c(100,600))
min(width(G4.raw))
min(width(ctcf.raw))
median(width(G4.raw))
median(width(ctcf.raw))
# Wulfridge CTCF ChIP-Seq mocks
mocks_bigwigs = c("../data/CutNTag_ChIP-Seq/bw/SRR23958387_GSM7116277_E14_Mock_CTCF_Rep1_Mus_musculus_ChIP-Seq.CPMnorm.bw",
"../data/CutNTag_ChIP-Seq/bw/SRR23958386_GSM7116278_E14_Mock_CTCF_Rep2_Mus_musculus_ChIP-Seq.CPMnorm.bw")
# PDS
# Wulfridge CTCF ChIP-Seq
pds_bigwigs = c("../data/CutNTag_ChIP-Seq/bw/SRR23958385_GSM7116279_E14_PDS_CTCF_Rep1_Mus_musculus_ChIP-Seq.CPMnorm.bw",
"../data/CutNTag_ChIP-Seq/bw/SRR23958384_GSM7116280_E14_PDS_CTCF_Rep2_Mus_musculus_ChIP-Seq.CPMnorm.bw")
pdc_bigwigs = c("../data/CutNTag_ChIP-Seq/bw/SRR23958383_GSM7116281_E14_PhenDC3_CTCF_Rep1_Mus_musculus_ChIP-Seq.CPMnorm.bw",
"../data/CutNTag_ChIP-Seq/bw/SRR23958382_GSM7116282_E14_PhenDC3_CTCF_Rep2_Mus_musculus_ChIP-Seq.CPMnorm.bw")
G4_bigwigs = c("../data/mendeley/Figure1/G4_CUT-Tag_thisStudy.bw")
cov.mocks <- bw_loci(mocks_bigwigs,peaks_bed,labels=c("mock_1","mock_2"))
