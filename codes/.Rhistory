ggarrange(p1,p2, ncol=2)
p1 <- plot_bw_profile(bwfiles = geo_bigwigs[c(1,3)],loci = top25.pdc.G4_1kb, mode = "center",verbose = F, colors = mypal[c(1,3)]) + coord_cartesian(ylim=c(0,10))
p2 <- plot_bw_profile(bwfiles = geo_bigwigs[c(1,3)],loci = top25.pdc.noG4, mode = "center",verbose = F, colors = mypal[c(1,3)]) + coord_cartesian(ylim=c(0,10))
ggarrange(p1,p2, ncol=2)
p1 <- plot_bw_profile(bwfiles = geo_bigwigs[3],bg_bwfiles = geo_bigwigs[1], loci = top25.pds.G4_1kb, mode = "center",verbose = F, colors = mypal[3],norm_mode = "log2fc",show_error = T) + coord_cartesian(ylim=c(-1,1))
p2 <- plot_bw_profile(bwfiles = geo_bigwigs[3],bg_bwfiles = geo_bigwigs[1], loci = top25.pds.noG4, mode = "center",verbose = F, colors = mypal[3],norm_mode = "log2fc",show_error = T) + coord_cartesian(ylim=c(-1,1))
ggarrange(p1,p2, ncol=2)
ggviolin(
results,
x = "G4.quantile",
y = "deseq.lfc.pds",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(-2, 2)) + geom_hline(yintercept = 0, linetype =
"dotted")
ggsave(glue("{plot_folder}Violin_CTCF_lfc_by_G4quantile.pdf"),
plot = last_plot())
ggviolin(
results,
x = "G4.quantile",
y = "log2.G4",
fill = mypal2[5],
add = "median_iqr"
) + geom_hline(yintercept = 0, linetype = "dotted")
ggsave(glue("{plot_folder}Violin_G4_by_G4quantile.pdf"), plot = last_plot())
peak_cats <- bedscout::import_named_bed_into_list(peaks_bed)
plot_bw_profile(
G4_bigwigs,
peak_cats,
labels = c(
peak_cats[[1]][1, ]$name,
peak_cats[[2]][1, ]$name,
peak_cats[[3]][1, ]$name,
peak_cats[[4]][1, ]$name
),
mode = "center",
show_error = T,
verbose = F,
remove_top = 0.001,
colors = mypal
)
plot_bw_profile(
combined_bigwigs[1],
peak_cats,
labels = c(
peak_cats[[1]][1, ]$name,
peak_cats[[2]][1, ]$name,
peak_cats[[3]][1, ]$name,
peak_cats[[4]][1, ]$name
),
mode = "center",
show_error = T,
verbose = F,
remove_top = 0.001,
colors = mypal
)
p1 <- plot_bw_profile(
c(mocks_bigwigs, pds_bigwigs),
peak_cats[[1]],
labels = c("mock1", "mock2", "trt1", "rtr2"),
mode = "center",
show_error = T,
verbose = F,
remove_top = 0.001,
colors = mypal2[c(9, 10, 5, 6)],
upstream = 1500,
downstream = 1500
)
p2 <- plot_bw_profile(
c(mocks_bigwigs, pds_bigwigs),
peak_cats[[2]],
labels = c("mock1", "mock2", "trt1", "rtr2"),
mode = "center",
show_error = T,
verbose = F,
remove_top = 0.001,
colors = mypal2[c(9, 10, 5, 6)],
upstream = 1500,
downstream = 1500
)
p3 <- plot_bw_profile(
c(mocks_bigwigs, pds_bigwigs),
peak_cats[[3]],
labels = c("mock1", "mock2", "trt1", "rtr2"),
mode = "center",
show_error = T,
verbose = F,
remove_top = 0.001,
colors = mypal2[c(9, 10, 5, 6)],
upstream = 1500,
downstream = 1500
)
p4 <- plot_bw_profile(
c(mocks_bigwigs, pds_bigwigs),
peak_cats[[4]],
labels = c("mock1", "mock2", "trt1", "rtr2"),
mode = "center",
show_error = T,
verbose = F,
remove_top = 0.001,
colors = mypal2[c(9, 10, 5, 6)],
upstream = 1500,
downstream = 1500
)
ggarrange(p1, p2, p3, p4, ncol = 4, nrow = 1)
p1 <- plot_bw_profile(
c(mocks_bigwigs, pds_bigwigs),
peak_cats[[1]],
labels = c("mock1", "mock2", "trt1", "rtr2"),
mode = "center",
show_error = T,
verbose = F,
remove_top = 0.001,
colors = mypal2[c(9, 10, 3, 4)],
upstream = 1500,
downstream = 1500
)
p2 <- plot_bw_profile(
c(mocks_bigwigs, pds_bigwigs),
peak_cats[[2]],
labels = c("mock1", "mock2", "trt1", "rtr2"),
mode = "center",
show_error = T,
verbose = F,
remove_top = 0.001,
colors = mypal2[c(9, 10, 3, 4)],
upstream = 1500,
downstream = 1500
)
p3 <- plot_bw_profile(
c(mocks_bigwigs, pds_bigwigs),
peak_cats[[3]],
labels = c("mock1", "mock2", "trt1", "rtr2"),
mode = "center",
show_error = T,
verbose = F,
remove_top = 0.001,
colors = mypal2[c(9, 10, 3, 4)],
upstream = 1500,
downstream = 1500
)
p4 <- plot_bw_profile(
c(mocks_bigwigs, pds_bigwigs),
peak_cats[[4]],
labels = c("mock1", "mock2", "trt1", "rtr2"),
mode = "center",
show_error = T,
verbose = F,
remove_top = 0.001,
colors = mypal2[c(9, 10, 3, 4)],
upstream = 1500,
downstream = 1500
)
ggarrange(p1, p2, p3, p4, ncol = 4, nrow = 1)
sigup.pds <- results[results$deseq.sigup.pds, ]
sigup.pdc <- results[results$deseq.sigup.pdc, ]
#export.bed(sigup.pds,"peaks_sigup_pds.bed")
#export.bed(sigup.pds,"peaks_sigup_pds.bed")
gghistogram(results, "width", add = "median", fill = "class")
G4_bed <- import('../data/peaks/G4_WT_peaks.narrowPeak')
ATAC_bed <- import('../data/peaks/ATAC_seq_mESC_Martire_peaks.narrowPeak')
pro_bed <- import('../data/peaks/regions/promoters_geneSymbol.mm10.bed')
G4_bed <- bedscout::annotate_overlapping_features(G4_bed, pro_bed, name_field = "name")
G4_bed$name <- "G4"
G4_bed$name[!is.na(G4_bed$nearby_features)] <- "G4pro"
G4_bed$name[grepl("pro", G4_bed$name)] <- "G4pro"
nearest_G4_1kb <- bedscout::annotate_nearby_features(
ctcf,
G4_bed,
distance_cutoff = 1000,
ignore.strand = T,
name_field = "name"
)
nearest_G4_2.5kb <- bedscout::annotate_nearby_features(
ctcf,
G4_bed,
distance_cutoff = 2500,
ignore.strand = T,
name_field = "name"
)
nearest_G4_5kb <- bedscout::annotate_nearby_features(
ctcf,
G4_bed,
distance_cutoff = 5000,
ignore.strand = T,
name_field = "name"
)
nearest_G4_10kb <- bedscout::annotate_nearby_features(
ctcf,
G4_bed,
distance_cutoff = 10000,
ignore.strand = T,
name_field = "name"
)
nearest_G4_50kb <- bedscout::annotate_nearby_features(
ctcf,
G4_bed,
distance_cutoff = 50000,
ignore.strand = T,
name_field = "name"
)
ctcf$nearest_G4 <- factor(">50kb",
levels = c("<1kb", "<2.5kb", "<5kb", "<10kb", "<50kb", ">50kb"))
ctcf$nearest_G4[!is.na(nearest_G4_50kb$nearby_features)] <- "<50kb"
ctcf$nearest_G4[!is.na(nearest_G4_10kb$nearby_features)] <- "<10kb"
ctcf$nearest_G4[!is.na(nearest_G4_5kb$nearby_features)] <- "<5kb"
ctcf$nearest_G4[!is.na(nearest_G4_2.5kb$nearby_features)] <- "<2.5kb"
ctcf$nearest_G4[!is.na(nearest_G4_1kb$nearby_features)] <- "<1kb"
ctcf$nearest_G4_type <- "none"
ctcf$nearest_G4_type[!is.na(nearest_G4_50kb$nearby_features)] <- nearest_G4_50kb$nearby_features[!is.na(nearest_G4_50kb$nearby_features)]
ctcf$nearest_G4_type[!is.na(nearest_G4_10kb$nearby_features)] <- nearest_G4_10kb$nearby_features[!is.na(nearest_G4_10kb$nearby_features)]
ctcf$nearest_G4_type[!is.na(nearest_G4_5kb$nearby_features)] <- nearest_G4_5kb$nearby_features[!is.na(nearest_G4_5kb$nearby_features)]
ctcf$nearest_G4_type[!is.na(nearest_G4_2.5kb$nearby_features)] <- nearest_G4_2.5kb$nearby_features[!is.na(nearest_G4_2.5kb$nearby_features)]
ctcf$nearest_G4_type[!is.na(nearest_G4_1kb$nearby_features)] <- nearest_G4_1kb$nearby_features[!is.na(nearest_G4_1kb$nearby_features)]
ctcf$nearest_G4_type[grep("pro", ctcf$nearest_G4_type)] <- "G4pro"
results$nearest_G4 <- ctcf$nearest_G4
results$nearest_G4_type <- ctcf$nearest_G4_type
table(results$nearest_G4)
table(results$nearest_G4_type)
table(results$nearest_G4, results$nearest_G4_type)
ggviolin(
results,
x = "nearest_G4",
y = "mean.mock",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(0, 10)) +
stat_compare_means(label.y = 8,
label.x = 3,
size = 3) +
geom_hline(yintercept = 0, linetype = "dotted")
ggsave(glue("{plot_folder}Violin_CTCF_signal_by_G4distance.pdf"),
plot = last_plot())
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pds",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(-4, 4)) + geom_hline(yintercept = 0, linewidth = 0.2) +
geom_hline(
yintercept = median(results$deseq.lfc.pds[results$nearest_G4 == "<1kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(label.y = 3,
label.x = 2,
size = 3)
ggsave(glue("{plot_folder}Violin_CTCF_PDS_lfc_by_G4distance.pdf"),
plot = last_plot())
nearest_G4_stats = compare_means(deseq.lfc.pds ~ nearest_G4, results)
nearest_G4_stats
write_tsv(nearest_G4_stats,
glue("{stat_output}pds_G4distance_plots-statistics.tsv"))
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pdc",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(-2, 2)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pdc[results$nearest_G4 == "<1kb"]),
linetype = "dotted",
linewidth = 0.2
)
ggsave(glue("{plot_folder}Violin_CTCF_PhenDC3_lfc_by_G4distance.pdf"), plot = last_plot())
nearest_G4_stats = compare_means(deseq.lfc.pdc ~ nearest_G4, results)
nearest_G4_stats
write_tsv(nearest_G4_stats, glue("{stat_output}phendc_G4distance_plots-statistics.tsv"))
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pds",
fill = "nearest_G4_type",
palette = mypal[c(1, 3, 5)],
add = "median_iqr"
) + coord_cartesian(ylim = c(-2, 4)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pds[results$nearest_G4 == "<1kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(aes(group = nearest_G4_type))
ggsave(glue("{plot_folder}Violin_CTCF_PDS_lfc_by_G4distance_pro.pdf"),
plot = last_plot())
compare_means(deseq.lfc.pds ~ nearest_G4, results[results$nearest_G4_type ==
"G4", ])
compare_means(deseq.lfc.pds ~ nearest_G4, results[results$nearest_G4_type ==
"G4", ]) %>%
write_tsv(.,
glue(
"{stat_output}pds_G4distance_plots-nearest_G4-statistics.tsv"
))
compare_means(deseq.lfc.pds ~ nearest_G4, results[results$nearest_G4_type ==
"G4pro", ])
compare_means(deseq.lfc.pds ~ nearest_G4, results[results$nearest_G4_type ==
"G4pro", ]) %>%
write_tsv(.,
glue(
"{stat_output}pds_G4distance_plots-nearest_G4pro-statistics.tsv"
))
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pdc",
fill = "nearest_G4_type",
palette = mypal[c(1, 3, 5)],
add = "median_iqr"
) + coord_cartesian(ylim = c(-2, 2)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pdc[results$nearest_G4 == "<1kb"]),
linetype = "dotted",
linewidth = 0.2
)
ggsave(glue(
"{plot_folder}Violin_CTCF_PhenDC3_lfc_by_G4distance_pro.pdf"
),
plot = last_plot())
compare_means(deseq.lfc.pdc ~ nearest_G4, results[results$nearest_G4_type ==
"G4", ])
compare_means(deseq.lfc.pdc ~ nearest_G4, results[results$nearest_G4_type ==
"G4", ]) %>%
write_tsv(.,
glue(
"{stat_output}phendc_G4distance_plots-nearest_G4-statistics.tsv"
))
compare_means(deseq.lfc.pdc ~ nearest_G4, results[results$nearest_G4_type ==
"G4pro", ])
compare_means(deseq.lfc.pdc ~ nearest_G4, results[results$nearest_G4_type ==
"G4pro", ]) %>%
write_tsv(.,
glue(
"{stat_output}phendc_G4distance_plots-nearest_G4pro-statistics.tsv"
))
#results <- read.table(glue("{result_folder}foldchange_results.txt"))
results$class <- factor(results$class, levels = c("CTCF_and_G4", "CTCF_not_G4"))
G4_bed <- import('../data/peaks/G4_WT_peaks.narrowPeak')
G4_bed$name <- "peak"
G4pred_bed <- import('../data/peaks/mm10_canonical_G4_PQS-regex.bed')
ATAC_bed <- import('../data/peaks/ATAC_seq_mESC_Martire_peaks.narrowPeak')
pro_bed <- import('../data/peaks/regions/promoters_geneSymbol.mm10.bed')
G4pred_bed <- bedscout::annotate_overlapping_features(G4pred_bed, G4_bed, name_field = "name")
G4pred_bed$name <- "G4pred"
G4pred_bed$name[grepl("peak", G4pred_bed$nearby_features)] <- "G4exp"
table(G4pred_bed$name)
nearest_G4_0kb <- bedscout::annotate_nearby_features(
ctcf,
G4pred_bed,
distance_cutoff = 0,
ignore.strand = T,
name_field = "name"
)
nearest_G4_1kb <- bedscout::annotate_nearby_features(
ctcf,
G4pred_bed,
distance_cutoff = 1000,
ignore.strand = T,
name_field = "name"
)
nearest_G4_2.5kb <- bedscout::annotate_nearby_features(
ctcf,
G4pred_bed,
distance_cutoff = 2500,
ignore.strand = T,
name_field = "name"
)
nearest_G4_5kb <- bedscout::annotate_nearby_features(
ctcf,
G4pred_bed,
distance_cutoff = 5000,
ignore.strand = T,
name_field = "name"
)
nearest_G4_10kb <- bedscout::annotate_nearby_features(
ctcf,
G4pred_bed,
distance_cutoff = 10000,
ignore.strand = T,
name_field = "name"
)
ctcf$nearest_G4 <- factor(">10kb",
levels = c("0kb", "<1kb", "<2.5kb", "<5kb", "<10kb", ">10kb"))
ctcf$nearest_G4[!is.na(nearest_G4_10kb$nearby_features)] <- "<10kb"
ctcf$nearest_G4[!is.na(nearest_G4_5kb$nearby_features)] <- "<5kb"
ctcf$nearest_G4[!is.na(nearest_G4_2.5kb$nearby_features)] <- "<2.5kb"
ctcf$nearest_G4[!is.na(nearest_G4_1kb$nearby_features)] <- "<1kb"
ctcf$nearest_G4[!is.na(nearest_G4_0kb$nearby_features)] <- "0kb"
results$nearest_G4 <- ctcf$nearest_G4
table(results$nearest_G4)
table(results$nearest_G4, results$pro)
mdf <- reshape2::melt(table(results$nearest_G4, results$pro))
ggplot(mdf, aes(Var1, Var2, fill = value)) +
geom_tile(show.legend = F) + geom_text(aes(label = value)) +
scale_fill_gradient(low = "white", high = "orange") + theme_minimal()
ggsave(glue("{plot_folder}Heatmap_CTCF_sites_by_predG4distance.pdf"),
plot = last_plot())
ggviolin(
results,
x = "nearest_G4",
y = "mean.mock",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(0, 10)) + geom_hline(yintercept = 0, linetype =
"dotted") +
stat_compare_means(
aes(group = nearest_G4),
label.y = 8,
label.x = 2,
size = 3
)
ggsave(glue(
"{plot_folder}Violin_CTCF_signal_by_predG4distance.pdf"),
plot = last_plot())
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pds",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(-0.5, 1.5)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = median(results$deseq.lfc.pds[results$nearest_G4 == "0kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(label.y = 1.3,
label.x = 3,
size = 2)
ggsave(glue("{plot_folder}Violin_CTCF_PDS_lfc_by_predG4distance.pdf"),
plot = last_plot())
compare_means(deseq.lfc.pds ~ nearest_G4, results)
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pdc",
fill = mypal[1],
add = "median_iqr"
) + coord_cartesian(ylim = c(-0.5, 1.5)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pdc[results$nearest_G4 == "0kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(label.y = 1.3,
label.x = 3,
size = 2)
ggsave(glue(
"{plot_folder}Violin_CTCF_PhenDC3_lfc_by_predG4distance.pdf"
),
plot = last_plot())
compare_means(deseq.lfc.pdc ~ nearest_G4, results)
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pds",
fill = "pro",
palette = mypal[c(1, 3, 5)],
add = "median_iqr"
) + coord_cartesian(ylim = c(-0.5, 1.5)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pds[results$nearest_G4 == "0kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(aes(group = pro),
label.y = 1.3,
label.x = 3,
size = 1.5)
ggsave(glue("{plot_folder}Violin_CTCF_PDS_lfc_by_predG4distance_pro.pdf"), plot = last_plot())
compare_means(deseq.lfc.pds ~ nearest_G4, results[results$pro == "Pro", ]) %>%
write_tsv(.,
glue("{stat_output}pds_G4distance_plots-Pro-statistics.tsv"))
compare_means(deseq.lfc.pds ~ pro, group.by = "nearest_G4", results) %>%
write_tsv(.,
glue(
"{stat_output}pds_G4distance_plots-between_prom_types_stats.tsv"
))
compare_means(deseq.lfc.pds ~ nearest_G4, group.by = "pro", results) %>%
write_tsv(.,
glue(
"{stat_output}pds_G4distance_plots-within_prom_types_stats.tsv"
))
ggviolin(
results,
x = "nearest_G4",
y = "deseq.lfc.pdc",
fill = "pro",
palette = mypal[c(1, 3, 5)],
add = "median_iqr"
) + coord_cartesian(ylim = c(-0.5, 1.5)) + geom_hline(yintercept = 0, linewidth = 0.2) + geom_hline(
yintercept = mean(results$deseq.lfc.pdc[results$nearest_G4 == "0kb"]),
linetype = "dotted",
linewidth = 0.2
) +
stat_compare_means(aes(group = pro),
label.y = 1.3,
label.x = 3,
size = 1.5)
ggsave(glue(
"{plot_folder}Violin_CTCF_PhenDC3_lfc_by_predG4distance_pro.pdf"
),
plot = last_plot())
compare_means(deseq.lfc.pdc ~ nearest_G4, results[results$pro == "noPro", ]) %>%
write_tsv(.,
glue(
"{stat_output}phendc_G4distance_plots-noPro-statistics.tsv"
))
compare_means(deseq.lfc.pdc ~ pro, group.by = "nearest_G4", results) %>%
write_tsv(.,
glue(
"{stat_output}phendc_G4distance_plots-between_prom_types_stats.tsv"
))
compare_means(deseq.lfc.pdc ~ nearest_G4, group.by = "pro", results) %>%
write_tsv(.,
glue(
"{stat_output}phendc_G4distance_plots-within_prom_types_stats.tsv"
))
